openapi: 3.0.3
info:
  title: Swagger AmbrosiaPos
  description: |
    Esta es la documentación de la API de Ambrosia POS.
    
    **Autenticación:** 

    - La autenticación se maneja mediante cookies HTTP con tokens JWT

    - El `accessToken` tiene una duración de 15 minutos

    - El `refreshToken` tiene una duración de 30 días

    - Para endpoints protegidos, el access token se envía automáticamente via cookies

    - Antes de que el access token expira, usar `/auth/refresh` para obtener uno nuevo

    **Nota:** Swagger UI puede no mostrar las cookies en la respuesta debido a restricciones de seguridad del navegador,
    pero están presentes en las cabeceras de respuesta HTTP real cuando se usa curl u otros clientes HTTP.
  termsOfService: https://github.com/btcgdl/Ambrosia-POS
  contact:
    email: guadalajarabitcoin@gmail.com
  license:
    name: MIT
    url: https://github.com/btcgdl/Ambrosia-POS?tab=MIT-1-ov-file
  version: ALPHA-0.0.1
servers:
  - url: http://127.0.0.1:9154
    description: Local development server
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Autentica a un usuario específico y establece cookies de sesión con tokens JWT
      description: |
        Autentica a un usuario específico y establece cookies de sesión con tokens JWT (access token y refresh token).
        
        **Notas importantes:**
        - La autenticación se maneja mediante cookies HTTP con tokens JWT
        - El `accessToken` tiene una duración de 15 minutos
        - El `refreshToken` tiene una duración de 30 días
        - Para endpoints protegidos, el access token se envía automáticamente via cookies
        - Cuando el access token expira, usar `/auth/refresh` para obtener uno nuevo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - pin
              properties:
                name:
                  type: string
                  description: "Nombre del usuario"
                  example: "admin"
                pin:
                  type: string
                  description: "PIN del usuario"
                  example: "1234"
            examples:
              default:
                summary: "Ejemplo de login"
                value:
                  name: "admin"
                  pin: "1234"
      responses:
        "200":
          description: "Éxito - Login successful"
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    example: "Login successful"
              examples:
                default:
                  value:
                    message: "Login successful"
          headers:
            Set-Cookie:
              description: "Se establecen cookies `accessToken` (15 min) y `refreshToken` (30 días)"
              schema:
                type: array
                items:
                  type: string
              examples:
                accessToken:
                  summary: Access Token Cookie (15 min)
                  value: "accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; Max-Age=900; Path=/"
                refreshToken:
                  summary: Refresh Token Cookie (30 días)
                  value: "refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; Max-Age=2592000; Path=/"
        "401":
          description: "Error - Invalid credentials"
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    example: "Invalid credentials"

  /auth/refresh:
    post:
      tags:
        - auth
      summary: Renueva el access token usando el refresh token almacenado en cookies
      description: |
        Renueva el access token usando el refresh token almacenado en cookies.
        
        **Request:** El refresh token debe estar presente en las cookies
      responses:
        "200":
          description: "Éxito - Access token refreshed successfully"
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    example: "Access token refreshed successfully"
          headers:
            Set-Cookie:
              description: "Se actualiza la cookie `accessToken`"
              schema:
                type: string
              example: "accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; Max-Age=900; Path=/"
        "401":
          description: "Error - Invalid refresh token"
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    example: "Invalid refresh token"

  /auth/logout:
    post:
      tags:
        - auth
      summary: Cierra la sesión del usuario, revoca el refresh token y elimina las cookies de autenticación
      description: |
        Cierra la sesión del usuario, revoca el refresh token y elimina las cookies de autenticación.
        
        **Authorization:** Requiere access token válido (enviado automáticamente via cookies)
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      responses:
        "200":
          description: "Éxito - Logout successful"
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    example: "Logout successful"
          headers:
            Set-Cookie:
              description: "Se eliminan las cookies `accessToken` y `refreshToken`"
              schema:
                type: array
                items:
                  type: string
              examples:
                clearAccessToken:
                  summary: Clear Access Token
                  value: "accessToken=; Max-Age=0; Path=/"
                clearRefreshToken:
                  summary: Clear Refresh Token
                  value: "refreshToken=; Max-Age=0; Path=/"
        "401":
          description: "Error - Unauthorized"
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    example: "Unauthorized"

  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: Retrieves all users from the system
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      responses:
        "200":
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
              examples:
                example1:
                  summary: Example users list
                  value:
                    - id: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
                      name: "admin"
                      pin: "****"
                      refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      role: "262006ea-8782-4b08-ac3b-b3f13270fec3"
                    - id: "262006ea-8782-4b08-ac3b-b3f13270fec3"
                      name: "waiter01"
                      pin: "****"
                      refreshToken: null
                      role: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
        "204":
          description: No users found
          content:
            application/json:
              schema:
                type: string
                example: "No users found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - users
      summary: Create a new user
      description: Creates a new user in the system
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
            examples:
              example1:
                summary: Example user creation
                value:
                  name: "newuser"
                  pin: "1234"
                  refreshToken: null
                  role: "262006ea-8782-4b08-ac3b-b3f13270fec3"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: string
                example: "User added successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Retrieves a specific user by their ID
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                example1:
                  summary: Example user
                  value:
                    id: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
                    name: "admin"
                    pin: "****"
                    refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    role: "262006ea-8782-4b08-ac3b-b3f13270fec3"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: string
                example: "User not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - users
      summary: Update user
      description: Updates an existing user
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
            examples:
              example1:
                summary: Example user update
                value:
                  name: "updateduser"
                  pin: "5678"
                  refreshToken: "new-refresh-token"
                  role: "262006ea-8782-4b08-ac3b-b3f13270fec3"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "User updated successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: string
                example: "User with ID: {id} not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - users
      summary: Delete user
      description: Deletes a user from the system
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "User deleted successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: string
                example: "User with ID: {id} not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /roles:
    get:
      tags:
        - roles
      summary: Get all roles
      description: Retrieves all roles from the system
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      responses:
        "200":
          description: Successfully retrieved roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
              examples:
                example1:
                  summary: Example roles list
                  value:
                    - id: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
                      name: "admin"
                      password: "****"
                      isAdmin: true
                    - id: "262006ea-8782-4b08-ac3b-b3f13270fec3"
                      name: "waiter"
                      password: "****"
                      isAdmin: false
        "204":
          description: No roles found
          content:
            application/json:
              schema:
                type: string
                example: "No roles found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - roles
      summary: Create a new role
      description: Creates a new role in the system
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRoleRequest"
            examples:
              example1:
                summary: Example role creation
                value:
                  role: "admin"
                  password: "S3cur3P4ssw0rd!!"
                  isAdmin: true
      responses:
        "201":
          description: Role created successfully
          content:
            application/json:
              schema:
                type: string
                example: "Role added successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /roles/{id}:
    get:
      tags:
        - roles
      summary: Get role by ID
      description: Retrieves a specific role by its ID
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Role ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
              examples:
                example1:
                  summary: Example role
                  value:
                    id: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
                    role: "admin"
                    password: "****"
                    isAdmin: true
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Role not found
          content:
            application/json:
              schema:
                type: string
                example: "Role not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - roles
      summary: Update role
      description: Updates an existing role
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Role ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRoleRequest"
            examples:
              example1:
                summary: Example role update
                value:
                  role: "admin"
                  password: "S3cur3P4ssw0rd123!!"
                  isAdmin: true
      responses:
        "200":
          description: Role updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "Role updated successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Role not found
          content:
            application/json:
              schema:
                type: string
                example: "Role with ID: {id} not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - roles
      summary: Delete role
      description: Deletes a role from the system
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Role ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Role deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "Role deleted successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Role not found
          content:
            application/json:
              schema:
                type: string
                example: "Role with ID: {id} not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /dish-categories:
    get:
      tags:
        - dish-categories
      summary: Obtiene todas las categorías de platos del sistema
      description: Obtiene todas las categorías de platos del sistema
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      responses:
        "200":
          description: Successfully retrieved dish categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DishCategory"
              examples:
                example1:
                  summary: Example dish categories list
                  value:
                    - id: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
                      name: "Entradas"
                    - id: "262006ea-8782-4b08-ac3b-b3f13270fec3"
                      name: "Platos Principales"
        "204":
          description: No dish categories found
          content:
            application/json:
              schema:
                type: string
                example: "No dish categories found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - dish-categories
      summary: Crea una nueva categoría de plato en el sistema
      description: Crea una nueva categoría de plato en el sistema
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDishCategoryRequest"
            examples:
              example1:
                summary: Example dish category creation
                value:
                  name: "Postres"
      responses:
        "201":
          description: Dish category created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    example: "Dish category added successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /dish-categories/{id}:
    get:
      tags:
        - dish-categories
      summary: Obtiene una categoría de plato específica por su ID
      description: Obtiene una categoría de plato específica por su ID
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Dish Category ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved dish category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DishCategory"
              examples:
                example1:
                  summary: Example dish category
                  value:
                    id: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
                    name: "Entradas"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Dish category not found
          content:
            application/json:
              schema:
                type: string
                example: "Dish category not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - dish-categories
      summary: Actualiza una categoría de plato existente
      description: Actualiza una categoría de plato existente
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Dish Category ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDishCategoryRequest"
            examples:
              example1:
                summary: Example dish category update
                value:
                  name: "Entradas Gourmet"
      responses:
        "200":
          description: Dish category updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "Dish category updated successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Dish category not found
          content:
            application/json:
              schema:
                type: string
                example: "Dish category not found or update failed"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - dish-categories
      summary: Elimina una categoría de plato del sistema
      description: Elimina una categoría de plato del sistema
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Dish Category ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Dish category deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "Dish category deleted successfully"
        "400":
          description: Cannot delete dish category
          content:
            application/json:
              schema:
                type: string
                example: "Cannot delete dish category - it may be in use or not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /dishes:
    get:
      tags:
        - dishes
      summary: Obtiene todos los platos del sistema
      description: Obtiene todos los platos del sistema
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      responses:
        "200":
          description: Successfully retrieved dishes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Dish"
              examples:
                example1:
                  summary: Example dishes list
                  value:
                    - id: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
                      name: "Pizza Margherita"
                      price: 15.99
                      category_id: "262006ea-8782-4b08-ac3b-b3f13270fec3"
                    - id: "262006ea-8782-4b08-ac3b-b3f13270fec3"
                      name: "Ensalada César"
                      price: 12.50
                      category_id: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
        "204":
          description: No dishes found
          content:
            application/json:
              schema:
                type: string
                example: "No dishes found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - dishes
      summary: Crea un nuevo plato en el sistema
      description: Crea un nuevo plato en el sistema
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDishRequest"
            examples:
              example1:
                summary: Example dish creation
                value:
                  name: "Pasta Carbonara"
                  price: 18.75
                  category_id: "262006ea-8782-4b08-ac3b-b3f13270fec3"
      responses:
        "201":
          description: Dish created successfully
          content:
            application/json:
              schema:
                type: string
                example: "Dish added successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /dishes/{id}:
    get:
      tags:
        - dishes
      summary: Obtiene un plato específico por su ID
      description: Obtiene un plato específico por su ID
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Dish ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved dish
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dish"
              examples:
                example1:
                  summary: Example dish
                  value:
                    id: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
                    name: "Pizza Margherita"
                    price: 15.99
                    category_id: "262006ea-8782-4b08-ac3b-b3f13270fec3"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Dish not found
          content:
            application/json:
              schema:
                type: string
                example: "Dish not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - dishes
      summary: Actualiza un plato existente
      description: Actualiza un plato existente
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Dish ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDishRequest"
            examples:
              example1:
                summary: Example dish update
                value:
                  name: "Pizza Margherita Premium"
                  price: 17.99
                  category_id: "262006ea-8782-4b08-ac3b-b3f13270fec3"
      responses:
        "200":
          description: Dish updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "Dish updated successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Dish not found
          content:
            application/json:
              schema:
                type: string
                example: "Dish not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - dishes
      summary: Elimina un plato del sistema
      description: Elimina un plato del sistema
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Dish ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Dish deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "Dish deleted successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /orders:
    get:
      tags:
        - orders
      summary: Obtiene todas las órdenes del sistema
      description: Obtiene todas las órdenes del sistema
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      responses:
        "200":
          description: Successfully retrieved orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
              examples:
                example1:
                  summary: Example orders list
                  value:
                    - id: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
                      user_id: "262006ea-8782-4b08-ac3b-b3f13270fec3"
                      table_id: "123e4567-e89b-12d3-a456-426614174000"
                      waiter: "Juan Pérez"
                      status: "pending"
                      total: 45.50
                      created_at: "2025-01-15T14:30:00Z"
        "204":
          description: No orders found
          content:
            application/json:
              schema:
                type: string
                example: "No orders found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - orders
      summary: Crea una nueva orden en el sistema
      description: Crea una nueva orden en el sistema
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderRequest"
            examples:
              example1:
                summary: Example order creation
                value:
                  user_id: "262006ea-8782-4b08-ac3b-b3f13270fec3"
                  table_id: "123e4567-e89b-12d3-a456-426614174000"
                  waiter: "María García"
                  status: "pending"
                  total: 0.0
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - id
                properties:
                  message:
                    type: string
                    example: "Order added successfully"
                  id:
                    type: string
                    example: "new-order-uuid"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /orders/{id}:
    get:
      tags:
        - orders
      summary: Obtiene una orden específica por su ID
      description: Obtiene una orden específica por su ID
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
              examples:
                example1:
                  summary: Example order
                  value:
                    id: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
                    user_id: "262006ea-8782-4b08-ac3b-b3f13270fec3"
                    table_id: "123e4567-e89b-12d3-a456-426614174000"
                    waiter: "Juan Pérez"
                    status: "pending"
                    total: 45.50
                    created_at: "2025-01-15T14:30:00Z"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                type: string
                example: "Order not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - orders
      summary: Actualiza una orden existente
      description: Actualiza una orden existente
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderRequest"
            examples:
              example1:
                summary: Example order update
                value:
                  user_id: "262006ea-8782-4b08-ac3b-b3f13270fec3"
                  table_id: "123e4567-e89b-12d3-a456-426614174000"
                  waiter: "Ana Martínez"
                  status: "completed"
                  total: 48.75
      responses:
        "200":
          description: Order updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "Order updated successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                type: string
                example: "Order not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - orders
      summary: Elimina una orden del sistema
      description: Elimina una orden del sistema
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Order deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "Order deleted successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                type: string
                example: "Order not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /orders/{id}/complete:
    get:
      tags:
        - orders
      summary: Obtiene una orden completa con todos sus platos
      description: Obtiene una orden completa con todos sus platos
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved complete order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompleteOrder"
              examples:
                example1:
                  summary: Example complete order
                  value:
                    order:
                      id: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
                      user_id: "262006ea-8782-4b08-ac3b-b3f13270fec3"
                      table_id: "123e4567-e89b-12d3-a456-426614174000"
                      waiter: "Juan Pérez"
                      status: "pending"
                      total: 45.50
                      created_at: "2025-01-15T14:30:00Z"
                    dishes:
                      - id: "dish-uuid-1"
                        order_id: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
                        dish_id: "pizza-uuid"
                        price_at_order: 15.99
                        notes: "Sin cebolla"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                type: string
                example: "Order not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /orders/with-dishes:
    post:
      tags:
        - orders
      summary: Crea una orden completa con platos incluidos
      description: Crea una orden completa con platos incluidos
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderWithDishesRequest"
            examples:
              example1:
                summary: Example order with dishes creation
                value:
                  order:
                    user_id: "262006ea-8782-4b08-ac3b-b3f13270fec3"
                    table_id: "123e4567-e89b-12d3-a456-426614174000"
                    waiter: "Carlos López"
                    status: "pending"
                    total: 0.0
                  dishes:
                    - dish_id: "pizza-uuid"
                      price_at_order: 15.99
                      notes: "Extra queso"
      responses:
        "201":
          description: Order with dishes created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - id
                properties:
                  message:
                    type: string
                    example: "Order with dishes added successfully"
                  id:
                    type: string
                    example: "new-order-uuid"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tables:
    get:
      tags:
        - tables
      summary: Obtiene todas las mesas del sistema
      description: Obtiene todas las mesas del sistema
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      responses:
        "200":
          description: Successfully retrieved tables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Table"
              examples:
                example1:
                  summary: Example tables list
                  value:
                    - id: "31c4a18d-a760-4d1f-a3ca-80b184c2d56c"
                      name: "Mesa 1"
                      status: "available"
                      space_id: "7743646d-946a-4401-96ca-f970b617485c"
                      order_id: null
                    - id: "605850d7-1c91-45dc-aabc-2e3055d8feae"
                      name: "Mesa 2"
                      status: "occupied"
                      space_id: "ee5078dc-8829-4c91-af1d-2096089d4608"
                      order_id: "b9f9c8c7-180c-49e5-8a45-0cfca41d2dfa"
        "204":
          description: No tables found
          content:
            application/json:
              schema:
                type: string
                example: "No tables found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - tables
      summary: Crea una nueva mesa
      description: Crea una nueva mesa
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTableRequest"
            examples:
              example1:
                summary: Example table creation
                value:
                  name: "Mesa 5"
                  status: "available"
                  space_id: "1a1a67c9-15bf-4f18-aadd-896308ff51c2"
                  order_id: null
      responses:
        "201":
          description: Table created successfully
          content:
            application/json:
              schema:
                type: string
                example: "Table added successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tables/{id}:
    get:
      tags:
        - tables
      summary: Obtiene una mesa específica por su ID
      description: Obtiene una mesa específica por su ID
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Table ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved table
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Table"
              examples:
                example1:
                  summary: Example table
                  value:
                    id: "2056766b-dcd7-4bb7-a3c7-40d953592195"
                    name: "Mesa 1"
                    status: "available"
                    space_id: "ded606ff-2d0b-4f89-8352-9d34355043be"
                    order_id: null
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Table not found
          content:
            application/json:
              schema:
                type: string
                example: "Table not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - tables
      summary: Actualiza una mesa existente
      description: Actualiza una mesa existente
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Table ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTableRequest"
            examples:
              example1:
                summary: Example table update
                value:
                  name: "Mesa 1 VIP"
                  status: "occupied"
                  space_id: "c5a51221-851d-4b7e-b534-1847091fcc09"
                  order_id: "d7c7a43c-7884-48b1-82c4-a18e48aafef8"
      responses:
        "200":
          description: Table updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "Table updated successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Table not found
          content:
            application/json:
              schema:
                type: string
                example: "Table not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - tables
      summary: Elimina una mesa del sistema
      description: Elimina una mesa del sistema
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Table ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Table deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "Table deleted successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Table not found
          content:
            application/json:
              schema:
                type: string
                example: "Table not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tables/by-space/{id}:
    get:
      tags:
        - tables
      summary: Obtiene todas las mesas de un espacio específico
      description: Obtiene todas las mesas de un espacio específico
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Space ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved tables for space
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Table"
              examples:
                example1:
                  summary: Example tables for space
                  value:
                    - id: "9c9064f5-f389-4e32-b037-805a86827777"
                      name: "Mesa 1"
                      status: "available"
                      space_id: "da787870-0cff-44a7-9179-ceeb49739292"
                      order_id: null
        "204":
          description: No tables found for space
          content:
            application/json:
              schema:
                type: string
                example: "No tables found for space ID: {id}"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /spaces:
    get:
      tags:
        - spaces
      summary: Obtiene todos los espacios del establecimiento
      description: Obtiene todos los espacios del establecimiento
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      responses:
        "200":
          description: Successfully retrieved spaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Space"
              examples:
                example1:
                  summary: Example spaces list
                  value:
                    - id: "space-uuid-1"
                      name: "Terraza"
                    - id: "space-uuid-2"
                      name: "Salón Principal"
        "204":
          description: No spaces found
          content:
            application/json:
              schema:
                type: string
                example: "No spaces found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - spaces
      summary: Crea un nuevo espacio
      description: Crea un nuevo espacio
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSpaceRequest"
            examples:
              example1:
                summary: Example space creation
                value:
                  name: "Jardín Exterior"
      responses:
        "201":
          description: Space created successfully
          content:
            application/json:
              schema:
                type: string
                example: "Space added successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /spaces/{id}:
    get:
      tags:
        - spaces
      summary: Obtiene un espacio específico por su ID
      description: Obtiene un espacio específico por su ID
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Space ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved space
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
              examples:
                example1:
                  summary: Example space
                  value:
                    id: "space-uuid-1"
                    name: "Terraza"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Space not found
          content:
            application/json:
              schema:
                type: string
                example: "Space not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - spaces
      summary: Actualiza un espacio existente
      description: Actualiza un espacio existente
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Space ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSpaceRequest"
            examples:
              example1:
                summary: Example space update
                value:
                  name: "Terraza Renovada"
      responses:
        "200":
          description: Space updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "Space updated successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Space not found
          content:
            application/json:
              schema:
                type: string
                example: "Space not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - spaces
      summary: Elimina un espacio del sistema
      description: Elimina un espacio del sistema
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Space ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Space deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "Space deleted successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /ingredients:
    get:
      tags:
        - ingredients
      summary: Obtiene todos los ingredientes del inventario
      description: Obtiene todos los ingredientes del inventario
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      responses:
        "200":
          description: Successfully retrieved ingredients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ingredient"
              examples:
                example1:
                  summary: Example ingredients list
                  value:
                    - id: "ingredient-uuid-1"
                      name: "Arroz"
                      category_id: "ingredient-category-uuid-1"
                      quantity: 50.0
                      unit: "kg"
                      low_stock_threshold: 10.0
                      cost_per_unit: 2.50
                    - id: "ingredient-uuid-2"
                      name: "Pollo"
                      category_id: "ingredient-category-uuid-2"
                      quantity: 25.0
                      unit: "kg"
                      low_stock_threshold: 5.0
                      cost_per_unit: 8.90
        "204":
          description: No ingredients found
          content:
            application/json:
              schema:
                type: string
                example: "No ingredients found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - ingredients
      summary: Crea un nuevo ingrediente
      description: Crea un nuevo ingrediente
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIngredientRequest"
            examples:
              example1:
                summary: Example ingredient creation
                value:
                  name: "Aceite de Oliva"
                  category_id: "ingredient-category-uuid-3"
                  quantity: 20.0
                  unit: "litros"
                  low_stock_threshold: 5.0
                  cost_per_unit: 4.50
      responses:
        "201":
          description: Ingredient created successfully
          content:
            application/json:
              schema:
                type: string
                example: "Ingredient added successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /ingredients/{id}:
    get:
      tags:
        - ingredients
      summary: Obtiene un ingrediente específico por su ID
      description: Obtiene un ingrediente específico por su ID
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Ingredient ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved ingredient
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ingredient"
              examples:
                example1:
                  summary: Example ingredient
                  value:
                    id: "ingredient-uuid-1"
                    name: "Arroz"
                    category_id: "ingredient-category-uuid-1"
                    quantity: 50.0
                    unit: "kg"
                    low_stock_threshold: 10.0
                    cost_per_unit: 2.50
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Ingredient not found
          content:
            application/json:
              schema:
                type: string
                example: "Ingredient not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - ingredients
      summary: Actualiza un ingrediente existente
      description: Actualiza un ingrediente existente
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Ingredient ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIngredientRequest"
            examples:
              example1:
                summary: Example ingredient update
                value:
                  name: "Arroz Bomba"
                  category_id: "ingredient-category-uuid-1"
                  quantity: 60.0
                  unit: "kg"
                  low_stock_threshold: 15.0
                  cost_per_unit: 3.00
      responses:
        "200":
          description: Ingredient updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "Ingredient updated successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Ingredient not found
          content:
            application/json:
              schema:
                type: string
                example: "Ingredient not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - ingredients
      summary: Elimina un ingrediente del inventario
      description: Elimina un ingrediente del inventario
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Ingredient ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Ingredient deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "Ingredient deleted successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Ingredient not found
          content:
            application/json:
              schema:
                type: string
                example: "Ingredient not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /ingredients/low_stock/{threshold}:
    get:
      tags:
        - ingredients
      summary: Obtiene ingredientes con stock bajo según el umbral especificado
      description: Obtiene ingredientes con stock bajo según el umbral especificado
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: threshold
          in: path
          required: true
          description: Umbral de stock bajo
          schema:
            type: number
            format: float
      responses:
        "200":
          description: Successfully retrieved low stock ingredients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ingredient"
              examples:
                example1:
                  summary: Example low stock ingredients
                  value:
                    - id: "ingredient-uuid-1"
                      name: "Arroz"
                      category_id: "ingredient-category-uuid-1"
                      quantity: 8.0
                      unit: "kg"
                      low_stock_threshold: 10.0
                      cost_per_unit: 2.50
        "204":
          description: No low stock ingredients found
          content:
            application/json:
              schema:
                type: string
                example: "No low stock ingredients found"
        "400":
          description: Invalid or missing threshold parameter
          content:
            application/json:
              schema:
                type: string
                example: "Invalid or missing threshold parameter"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /ingredient-categories:
    get:
      tags:
        - ingredient-categories
      summary: Obtiene todas las categorías de ingredientes
      description: Obtiene todas las categorías de ingredientes
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      responses:
        "200":
          description: Successfully retrieved ingredient categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IngredientCategory"
              examples:
                example1:
                  summary: Example ingredient categories list
                  value:
                    - id: "ingredient-category-uuid-1"
                      name: "Cereales"
                    - id: "ingredient-category-uuid-2"
                      name: "Carnes"
                    - id: "ingredient-category-uuid-3"
                      name: "Aceites y Condimentos"
        "204":
          description: No ingredient categories found
          content:
            application/json:
              schema:
                type: string
                example: "No ingredient categories found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - ingredient-categories
      summary: Crea una nueva categoría de ingredientes
      description: Crea una nueva categoría de ingredientes
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIngredientCategoryRequest"
            examples:
              example1:
                summary: Example ingredient category creation
                value:
                  name: "Lácteos"
      responses:
        "201":
          description: Ingredient category created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - message
                properties:
                  id:
                    type: string
                    example: "generated-uuid"
                  message:
                    type: string
                    example: "Ingredient category added successfully"
        "400":
          description: Failed to create ingredient category
          content:
            application/json:
              schema:
                type: string
                example: "Failed to create ingredient category"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /ingredient-categories/{id}:
    get:
      tags:
        - ingredient-categories
      summary: Obtiene una categoría específica por su ID
      description: Obtiene una categoría específica por su ID
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Ingredient Category ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved ingredient category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IngredientCategory"
              examples:
                example1:
                  summary: Example ingredient category
                  value:
                    id: "ingredient-category-uuid-1"
                    name: "Cereales"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Ingredient category not found
          content:
            application/json:
              schema:
                type: string
                example: "Ingredient category not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - ingredient-categories
      summary: Actualiza una categoría existente
      description: Actualiza una categoría existente
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Ingredient Category ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIngredientCategoryRequest"
            examples:
              example1:
                summary: Example ingredient category update
                value:
                  name: "Cereales y Granos"
      responses:
        "200":
          description: Ingredient category updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "Ingredient category updated successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Ingredient category not found
          content:
            application/json:
              schema:
                type: string
                example: "Ingredient category not found or update failed"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - ingredient-categories
      summary: Elimina una categoría del sistema
      description: Elimina una categoría del sistema
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Ingredient Category ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Ingredient category deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "Ingredient category deleted successfully"
        "400":
          description: Cannot delete ingredient category
          content:
            application/json:
              schema:
                type: string
                example: "Cannot delete ingredient category - it may be in use or not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /suppliers:
    get:
      tags:
        - suppliers
      summary: Obtiene todos los proveedores del sistema
      description: Obtiene todos los proveedores del sistema
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      responses:
        "200":
          description: Successfully retrieved suppliers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Supplier"
              examples:
                example1:
                  summary: Example suppliers list
                  value:
                    - id: "1c322996-8696-4dcb-b14e-8c7abd8a4880"
                      name: "Distribuidora Central"
                      contact: "María García"
                      phone: "+34 666 123 456"
                      email: "maria@distribuidora.com"
                      address: "Calle Mayor 123, Madrid"
                    - id: "c46c6b1b-480c-4a83-86fc-327f6dbf9718"
                      name: "Carnicería El Toro"
                      contact: "Juan Pérez"
                      phone: "+34 677 234 567"
                      email: "juan@carniceriaeltoro.com"
                      address: "Avenida de la Paz 45, Valencia"
        "204":
          description: No suppliers found
          content:
            application/json:
              schema:
                type: string
                example: "No suppliers found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - suppliers
      summary: Crea un nuevo proveedor
      description: Crea un nuevo proveedor
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSupplierRequest"
            examples:
              example1:
                summary: Example supplier creation
                value:
                  name: "Frutas y Verduras Frescas"
                  contact: "Ana López"
                  phone: "+34 688 345 678"
                  email: "ana@frutasfrescas.com"
                  address: "Mercado Central, Puesto 15, Sevilla"
      responses:
        "201":
          description: Supplier created successfully
          content:
            application/json:
              schema:
                type: string
                example: "Supplier added successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /suppliers/{id}:
    get:
      tags:
        - suppliers
      summary: Obtiene un proveedor específico por su ID
      description: Obtiene un proveedor específico por su ID
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Supplier ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved supplier
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Supplier"
              examples:
                example1:
                  summary: Example supplier
                  value:
                    id: "5f7037ea-a0cc-4820-9df4-90a80960d897"
                    name: "Distribuidora Central"
                    contact: "María García"
                    phone: "+34 666 123 456"
                    email: "maria@distribuidora.com"
                    address: "Calle Mayor 123, Madrid"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Supplier not found
          content:
            application/json:
              schema:
                type: string
                example: "Supplier not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - suppliers
      summary: Actualiza un proveedor existente
      description: Actualiza un proveedor existente
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Supplier ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSupplierRequest"
            examples:
              example1:
                summary: Example supplier update
                value:
                  name: "Distribuidora Central S.L."
                  contact: "María García Rodríguez"
                  phone: "+34 666 123 456"
                  email: "maria.garcia@distribuidora.com"
                  address: "Calle Mayor 123, 28001 Madrid"
      responses:
        "200":
          description: Supplier updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "Supplier updated successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Supplier not found
          content:
            application/json:
              schema:
                type: string
                example: "Supplier not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - suppliers
      summary: Elimina un proveedor del sistema
      description: Elimina un proveedor del sistema
      security:
        - accessTokenAuth: []
        - refreshTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Supplier ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Supplier deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "Supplier deleted successfully"
        "400":
          description: Missing or malformed ID
          content:
            application/json:
              schema:
                type: string
                example: "Missing or malformed ID"
        "404":
          description: Supplier not found
          content:
            application/json:
              schema:
                type: string
                example: "Supplier not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    accessTokenAuth:
      type: apiKey
      in: cookie
      name: accessToken
      description: Access token stored in HTTP-only cookie
    refreshTokenAuth:
      type: apiKey
      in: cookie
      name: refreshToken
      description: Refresh token stored in HTTP-only cookie

  schemas:
    LoginRequest:
      type: object
      required:
        - name
        - pin
      properties:
        name:
          type: string
          description: The name of the user attempting to login
          example: "admin"
        pin:
          type: string
          description: The PIN for the user
          example: "1234"
          minLength: 4
      additionalProperties: false

    LoginSuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Success message indicating session establishment. NOTE - Authentication tokens are automatically set as HTTP-only cookies (accessToken and refreshToken) in the response headers.
          example: "Login successful"
      additionalProperties: false

    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Error message describing what went wrong
          example: "Invalid credentials"
        code:
          type: string
          description: Error code for programmatic handling (optional)
          example: "AUTH_001"
        details:
          type: object
          description: Additional error details (optional)
          additionalProperties: true
      additionalProperties: false

    RefreshSuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Success message for token refresh
          example: "Access token refreshed successfully"
      additionalProperties: false

    LogoutSuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Success message for logout
          example: "Logout successful"
      additionalProperties: false

    User:
      type: object
      required:
        - id
        - name
        - pin
        - role
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
          example: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
        name:
          type: string
          description: User name
          example: "admin"
        pin:
          type: string
          description: User PIN (masked for security)
          example: "****"
        refreshToken:
          type: string
          nullable: true
          description: Refresh token for the user (can be null)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        role:
          type: string
          format: uuid
          description: Role ID assigned to the user
          example: "262006ea-8782-4b08-ac3b-b3f13270fec3"
      additionalProperties: false

    CreateUserRequest:
      type: object
      required:
        - name
        - pin
        - role
      properties:
        name:
          type: string
          description: User name
          example: "newuser"
        pin:
          type: string
          description: User PIN
          example: "1234"
        refreshToken:
          type: string
          nullable: true
          description: Refresh token for the user (optional)
          example: null
        role:
          type: string
          format: uuid
          description: Role ID to assign to the user
          example: "262006ea-8782-4b08-ac3b-b3f13270fec3"
      additionalProperties: false

    UpdateUserRequest:
      type: object
      required:
        - name
        - pin
        - role
      properties:
        name:
          type: string
          description: Updated user name
          example: "updateduser"
        pin:
          type: string
          description: Updated user PIN
          example: "5678"
        refreshToken:
          type: string
          nullable: true
          description: Updated refresh token for the user
          example: "new-refresh-token"
        role:
          type: string
          format: uuid
          description: Updated role ID for the user
          example: "262006ea-8782-4b08-ac3b-b3f13270fec3"
      additionalProperties: false

    Role:
      type: object
      required:
        - id
        - name
        - password
        - isAdmin
      properties:
        id:
          type: string
          format: uuid
          description: Unique role identifier
          example: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
        name:
          type: string
          description: Role name
          example: "admin"
        password:
          type: string
          description: Role password (masked for security)
          example: "****"
        isAdmin:
          type: boolean
          description: Whether this role has admin privileges
          example: true
      additionalProperties: false

    CreateRoleRequest:
      type: object
      required:
        - role
        - password
        - isAdmin
      properties:
        role:
          type: string
          description: Role name
          example: "admin"
        password:
          type: string
          description: Role password
          example: "S3cur3P4ssw0rd!!"
        isAdmin:
          type: boolean
          description: Whether this role should have admin privileges
          example: true
      additionalProperties: false

    UpdateRoleRequest:
      type: object
      required:
        - role
        - password
        - isAdmin
      properties:
        role:
          type: string
          description: Updated role name
          example: "admin"
        password:
          type: string
          description: Updated role password
          example: "S3cur3P4ssw0rd123!!"
        isAdmin:
          type: boolean
          description: Updated admin privileges flag
          example: true
      additionalProperties: false

    DishCategory:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Unique dish category identifier
          example: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
        name:
          type: string
          description: Dish category name
          example: "Entradas"
      additionalProperties: false

    CreateDishCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Dish category name
          example: "Postres"
      additionalProperties: false

    UpdateDishCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Updated dish category name
          example: "Entradas Gourmet"
      additionalProperties: false

    Dish:
      type: object
      required:
        - id
        - name
        - price
        - category_id
      properties:
        id:
          type: string
          format: uuid
          description: Unique dish identifier
          example: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
        name:
          type: string
          description: Dish name
          example: "Pizza Margherita"
        price:
          type: number
          format: float
          description: Dish price
          example: 15.99
        category_id:
          type: string
          format: uuid
          description: Category ID the dish belongs to
          example: "262006ea-8782-4b08-ac3b-b3f13270fec3"
      additionalProperties: false

    CreateDishRequest:
      type: object
      required:
        - name
        - price
        - category_id
      properties:
        name:
          type: string
          description: Dish name
          example: "Pasta Carbonara"
        price:
          type: number
          format: float
          description: Dish price
          example: 18.75
        category_id:
          type: string
          format: uuid
          description: Category ID the dish belongs to
          example: "262006ea-8782-4b08-ac3b-b3f13270fec3"
      additionalProperties: false

    UpdateDishRequest:
      type: object
      required:
        - name
        - price
        - category_id
      properties:
        name:
          type: string
          description: Updated dish name
          example: "Pizza Margherita Premium"
        price:
          type: number
          format: float
          description: Updated dish price
          example: 17.99
        category_id:
          type: string
          format: uuid
          description: Updated category ID the dish belongs to
          example: "262006ea-8782-4b08-ac3b-b3f13270fec3"
      additionalProperties: false

    Order:
      type: object
      required:
        - id
        - user_id
        - table_id
        - waiter
        - status
        - total
        - created_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique order identifier
          example: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
        user_id:
          type: string
          format: uuid
          description: User ID who created the order
          example: "262006ea-8782-4b08-ac3b-b3f13270fec3"
        table_id:
          type: string
          format: uuid
          description: Table ID where the order is placed
          example: "123e4567-e89b-12d3-a456-426614174000"
        waiter:
          type: string
          description: Name of the waiter handling the order
          example: "Juan Pérez"
        status:
          type: string
          description: Order status
          example: "pending"
          enum: ["pending", "completed", "cancelled"]
        total:
          type: number
          format: float
          description: Total amount of the order
          example: 45.50
        created_at:
          type: string
          format: date-time
          description: Order creation timestamp
          example: "2025-01-15T14:30:00Z"
      additionalProperties: false

    CreateOrderRequest:
      type: object
      required:
        - user_id
        - table_id
        - waiter
        - status
        - total
      properties:
        user_id:
          type: string
          format: uuid
          description: User ID who creates the order
          example: "262006ea-8782-4b08-ac3b-b3f13270fec3"
        table_id:
          type: string
          format: uuid
          description: Table ID where the order is placed
          example: "123e4567-e89b-12d3-a456-426614174000"
        waiter:
          type: string
          description: Name of the waiter handling the order
          example: "María García"
        status:
          type: string
          description: Order status
          example: "pending"
          enum: ["pending", "completed", "cancelled"]
        total:
          type: number
          format: float
          description: Total amount of the order
          example: 0.0
      additionalProperties: false

    UpdateOrderRequest:
      type: object
      required:
        - user_id
        - table_id
        - waiter
        - status
        - total
      properties:
        user_id:
          type: string
          format: uuid
          description: Updated user ID
          example: "262006ea-8782-4b08-ac3b-b3f13270fec3"
        table_id:
          type: string
          format: uuid
          description: Updated table ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        waiter:
          type: string
          description: Updated waiter name
          example: "Ana Martínez"
        status:
          type: string
          description: Updated order status
          example: "completed"
          enum: ["pending", "completed", "cancelled"]
        total:
          type: number
          format: float
          description: Updated total amount
          example: 48.75
      additionalProperties: false

    OrderDish:
      type: object
      required:
        - id
        - order_id
        - dish_id
        - price_at_order
      properties:
        id:
          type: string
          format: uuid
          description: Unique order dish identifier
          example: "dish-uuid-1"
        order_id:
          type: string
          format: uuid
          description: Order ID this dish belongs to
          example: "76ee1086-b945-4170-b2e6-9fbeb95ae0be"
        dish_id:
          type: string
          format: uuid
          description: Dish ID
          example: "pizza-uuid"
        price_at_order:
          type: number
          format: float
          description: Price of the dish at the time of order
          example: 15.99
        notes:
          type: string
          description: Special notes for the dish
          example: "Sin cebolla"
      additionalProperties: false

    CompleteOrder:
      type: object
      required:
        - order
        - dishes
      properties:
        order:
          $ref: "#/components/schemas/Order"
        dishes:
          type: array
          items:
            $ref: "#/components/schemas/OrderDish"
      additionalProperties: false

    CreateOrderWithDishesRequest:
      type: object
      required:
        - order
        - dishes
      properties:
        order:
          $ref: "#/components/schemas/CreateOrderRequest"
        dishes:
          type: array
          items:
            type: object
            required:
              - dish_id
              - price_at_order
            properties:
              dish_id:
                type: string
                format: uuid
                description: Dish ID
                example: "pizza-uuid"
              price_at_order:
                type: number
                format: float
                description: Price of the dish at order time
                example: 15.99
              notes:
                type: string
                description: Special notes for the dish
                example: "Extra queso"
      additionalProperties: false

    Table:
      type: object
      required:
        - id
        - name
        - status
        - space_id
      properties:
        id:
          type: string
          format: uuid
          description: Unique table identifier
          example: "31c4a18d-a760-4d1f-a3ca-80b184c2d56c"
        name:
          type: string
          description: Table name
          example: "Mesa 1"
        status:
          type: string
          description: Table status
          example: "available"
          enum: ["available", "occupied", "reserved"]
        space_id:
          type: string
          format: uuid
          description: Space ID where the table is located
          example: "7743646d-946a-4401-96ca-f970b617485c"
        order_id:
          type: string
          format: uuid
          nullable: true
          description: Order ID if table has an active order
          example: null
      additionalProperties: false

    CreateTableRequest:
      type: object
      required:
        - name
        - status
        - space_id
      properties:
        name:
          type: string
          description: Table name
          example: "Mesa 5"
        status:
          type: string
          description: Table status
          example: "available"
          enum: ["available", "occupied", "reserved"]
        space_id:
          type: string
          format: uuid
          description: Space ID where the table will be located
          example: "1a1a67c9-15bf-4f18-aadd-896308ff51c2"
        order_id:
          type: string
          format: uuid
          nullable: true
          description: Order ID if table has an active order
          example: null
      additionalProperties: false

    UpdateTableRequest:
      type: object
      required:
        - name
        - status
        - space_id
      properties:
        name:
          type: string
          description: Updated table name
          example: "Mesa 1 VIP"
        status:
          type: string
          description: Updated table status
          example: "occupied"
          enum: ["available", "occupied", "reserved"]
        space_id:
          type: string
          format: uuid
          description: Updated space ID
          example: "c5a51221-851d-4b7e-b534-1847091fcc09"
        order_id:
          type: string
          format: uuid
          nullable: true
          description: Updated order ID
          example: "d7c7a43c-7884-48b1-82c4-a18e48aafef8"
      additionalProperties: false

    Space:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Unique space identifier
          example: "space-uuid-1"
        name:
          type: string
          description: Space name
          example: "Terraza"
      additionalProperties: false

    CreateSpaceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Space name
          example: "Jardín Exterior"
      additionalProperties: false

    UpdateSpaceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Updated space name
          example: "Terraza Renovada"
      additionalProperties: false

    Ingredient:
      type: object
      required:
        - id
        - name
        - category_id
        - quantity
        - unit
        - low_stock_threshold
        - cost_per_unit
      properties:
        id:
          type: string
          format: uuid
          description: Unique ingredient identifier
          example: "ingredient-uuid-1"
        name:
          type: string
          description: Ingredient name
          example: "Arroz"
        category_id:
          type: string
          format: uuid
          description: Category ID the ingredient belongs to
          example: "ingredient-category-uuid-1"
        quantity:
          type: number
          format: float
          description: Current quantity in stock
          example: 50.0
        unit:
          type: string
          description: Unit of measurement
          example: "kg"
        low_stock_threshold:
          type: number
          format: float
          description: Minimum quantity before considering low stock
          example: 10.0
        cost_per_unit:
          type: number
          format: float
          description: Cost per unit of the ingredient
          example: 2.50
      additionalProperties: false

    CreateIngredientRequest:
      type: object
      required:
        - name
        - category_id
        - quantity
        - unit
        - low_stock_threshold
        - cost_per_unit
      properties:
        name:
          type: string
          description: Ingredient name
          example: "Aceite de Oliva"
        category_id:
          type: string
          format: uuid
          description: Category ID the ingredient belongs to
          example: "ingredient-category-uuid-3"
        quantity:
          type: number
          format: float
          description: Initial quantity in stock
          example: 20.0
        unit:
          type: string
          description: Unit of measurement
          example: "litros"
        low_stock_threshold:
          type: number
          format: float
          description: Minimum quantity before considering low stock
          example: 5.0
        cost_per_unit:
          type: number
          format: float
          description: Cost per unit of the ingredient
          example: 4.50
      additionalProperties: false

    UpdateIngredientRequest:
      type: object
      required:
        - name
        - category_id
        - quantity
        - unit
        - low_stock_threshold
        - cost_per_unit
      properties:
        name:
          type: string
          description: Updated ingredient name
          example: "Arroz Bomba"
        category_id:
          type: string
          format: uuid
          description: Updated category ID
          example: "ingredient-category-uuid-1"
        quantity:
          type: number
          format: float
          description: Updated quantity in stock
          example: 60.0
        unit:
          type: string
          description: Updated unit of measurement
          example: "kg"
        low_stock_threshold:
          type: number
          format: float
          description: Updated minimum quantity threshold
          example: 15.0
        cost_per_unit:
          type: number
          format: float
          description: Updated cost per unit
          example: 3.00
      additionalProperties: false

    IngredientCategory:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Unique ingredient category identifier
          example: "ingredient-category-uuid-1"
        name:
          type: string
          description: Ingredient category name
          example: "Cereales"
      additionalProperties: false

    CreateIngredientCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Ingredient category name
          example: "Lácteos"
      additionalProperties: false

    UpdateIngredientCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Updated ingredient category name
          example: "Cereales y Granos"
      additionalProperties: false

    Supplier:
      type: object
      required:
        - id
        - name
        - contact
        - phone
        - email
        - address
      properties:
        id:
          type: string
          format: uuid
          description: Unique supplier identifier
          example: "1c322996-8696-4dcb-b14e-8c7abd8a4880"
        name:
          type: string
          description: Supplier company name
          example: "Distribuidora Central"
        contact:
          type: string
          description: Contact person name
          example: "María García"
        phone:
          type: string
          description: Phone number
          example: "+34 666 123 456"
        email:
          type: string
          format: email
          description: Email address
          example: "maria@distribuidora.com"
        address:
          type: string
          description: Physical address
          example: "Calle Mayor 123, Madrid"
      additionalProperties: false

    CreateSupplierRequest:
      type: object
      required:
        - name
        - contact
        - phone
        - email
        - address
      properties:
        name:
          type: string
          description: Supplier company name
          example: "Frutas y Verduras Frescas"
        contact:
          type: string
          description: Contact person name
          example: "Ana López"
        phone:
          type: string
          description: Phone number
          example: "+34 688 345 678"
        email:
          type: string
          format: email
          description: Email address
          example: "ana@frutasfrescas.com"
        address:
          type: string
          description: Physical address
          example: "Mercado Central, Puesto 15, Sevilla"
      additionalProperties: false

    UpdateSupplierRequest:
      type: object
      required:
        - name
        - contact
        - phone
        - email
        - address
      properties:
        name:
          type: string
          description: Updated supplier company name
          example: "Distribuidora Central S.L."
        contact:
          type: string
          description: Updated contact person name
          example: "María García Rodríguez"
        phone:
          type: string
          description: Updated phone number
          example: "+34 666 123 456"
        email:
          type: string
          format: email
          description: Updated email address
          example: "maria.garcia@distribuidora.com"
        address:
          type: string
          description: Updated physical address
          example: "Calle Mayor 123, 28001 Madrid"
      additionalProperties: false

tags:
  - name: auth
    description: Authentication and session management endpoints
  - name: users
    description: User management endpoints
  - name: roles
    description: Role management endpoints
  - name: dish-categories
    description: Dish category management endpoints
  - name: dishes
    description: Dish management endpoints
  - name: orders
    description: Order management endpoints
  - name: tables
    description: Table management endpoints
  - name: spaces
    description: Space management endpoints
  - name: ingredients
    description: Ingredient management endpoints
  - name: ingredient-categories
    description: Ingredient category management endpoints
  - name: suppliers
    description: Supplier management endpoints
